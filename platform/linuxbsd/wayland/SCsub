#!/usr/bin/env python

Import("env")

# TODO: Add warning to headers and code about their autogenerated status.
if env["use_sowrap"]:
    # We have to implement separate builders for so wrappers as the
    # autogenerated Wayland protocol wrapper must include them instead of the
    # native libraries.

    WAYLAND_BUILDERS_SOWRAP = {
        "WAYLAND_API_HEADER": Builder(
            action=Action(
                "wayland-scanner -c client-header < ${SOURCE} | sed 's:wayland-client-core\.h:../dynwrappers/wayland-client-core-so_wrap\.h:' > ${TARGET}",
                'Generating Wayland client header: "${TARGET}"',
            ),
            single_source=True,
        ),
        "WAYLAND_API_CODE": Builder(
            action=Action(
                "wayland-scanner -c private-code < ${SOURCE} | sed 's:wayland-util\.h:../dynwrappers/wayland-client-core-so_wrap\.h:' > ${TARGET}",
                'Generating Wayland protocol marshalling code: "${TARGET}"',
            ),
            single_source=True,
        ),
    }
    env.Append(BUILDERS=WAYLAND_BUILDERS_SOWRAP)
else:
    WAYLAND_BUILDERS = {
        "WAYLAND_API_HEADER": Builder(
            action=Action(
                "wayland-scanner -c client-header < ${SOURCE} > ${TARGET}",
                'Generating Wayland client header: "${TARGET}"',
            ),
            single_source=True,
        ),
        "WAYLAND_API_CODE": Builder(
            action=Action(
                "wayland-scanner -c private-code < ${SOURCE} > ${TARGET}",
                'Generating Wayland protocol marshalling code: "${TARGET}"',
            ),
            single_source=True,
        ),
    }
    env.Append(BUILDERS=WAYLAND_BUILDERS)

# TODO: Rebuild headers if they change.
env.WAYLAND_API_HEADER(target="protocol/wayland.gen.h", source="#thirdparty/wayland/protocol/wayland.xml")
env.WAYLAND_API_CODE(target="protocol/wayland.gen.c", source="#thirdparty/wayland/protocol/wayland.xml")

env.WAYLAND_API_HEADER(
    target="protocol/xdg_shell_unstable_v6.gen.h", source="#thirdparty/wayland-protocols/unstable/xdg-shell/xdg-shell-unstable-v6.xml"
)

env.WAYLAND_API_CODE(
    target="protocol/xdg_shell_unstable_v6.gen.c", source="#thirdparty/wayland-protocols/unstable/xdg-shell/xdg-shell-unstable-v6.xml"
)

source_files = [
    "protocol/wayland.gen.c",
    "protocol/xdg_shell_unstable_v6.gen.c",
    "display_server_wayland.cpp",
    "key_mapping_xkb.cpp",
]

if env["use_sowrap"]:
    source_files.append(
        [
            "dynwrappers/wayland-cursor-so_wrap.c",
            "dynwrappers/wayland-client-core-so_wrap.c",
            "dynwrappers/wayland-egl-core-so_wrap.c",
        ]
    )

    if env["libdecor"]:
        source_files.append("dynwrappers/libdecor-so_wrap.c")


if env["vulkan"]:
    source_files.append("vulkan_context_wayland.cpp")

if env["opengl3"]:
    source_files.append("egl_manager_wayland.cpp")

objects = []

for source_file in source_files:
    objects.append(env.Object(source_file))

Return("objects")
