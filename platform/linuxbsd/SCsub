#!/usr/bin/env python

Import("env")

from platform_methods import run_in_subprocess
import platform_linuxbsd_builders

common_linuxbsd = [
    "crash_handler_linuxbsd.cpp",
    "os_linuxbsd.cpp",
    "joypad_linux.cpp",
    "freedesktop_screensaver.cpp",
]

if "x11" in env and env["x11"]:
    common_linuxbsd += [
        "gl_manager_x11.cpp",
        "detect_prime_x11.cpp",
        "display_server_x11.cpp",
        "key_mapping_x11.cpp",
    ]
    if "vulkan" in env and env["vulkan"]:
        common_linuxbsd.append("vulkan_context_x11.cpp")

thirdparty_dir = "#thirdparty"

if "wayland" in env and env["wayland"]:
    # TODO: Add warning to headers and code about their autogenerated status.
    WAYLAND_BUILDERS = {
        "WAYLAND_API_HEADER": Builder(
            action=Action(
                "wayland-scanner -c client-header ${SOURCE} ${TARGET}", 'Building Wayland client header: "${TARGET}"'
            ),
            single_source=True,
        ),
        "WAYLAND_API_CODE": Builder(
            action=Action(
                "wayland-scanner -c private-code ${SOURCE} ${TARGET}",
                'Building Wayland protocol marshalling code: "${TARGET}"',
            ),
            single_source=True,
        ),
    }

    env.Append(BUILDERS=WAYLAND_BUILDERS)

    env.WAYLAND_API_HEADER(
        target="xdg_shell_unstable_v6.gen.h", source="#thirdparty/wayland-protocols/unstable/xdg-shell/xdg-shell-unstable-v6.xml"
    )

    env.WAYLAND_API_CODE(
        target="xdg_shell_unstable_v6.gen.c", source="#thirdparty/wayland-protocols/unstable/xdg-shell/xdg-shell-unstable-v6.xml"
    )

    common_linuxbsd += [
        "xdg_shell_unstable_v6.gen.c",
        "display_server_wayland.cpp",
        "key_mapping_xkb.cpp",
    ]
    
    if "vulkan" in env and env["vulkan"]:
        common_linuxbsd.append("vulkan_context_wayland.cpp")


if "speechd" in env and env["speechd"]:
    common_linuxbsd.append(["speechd-so_wrap.c", "tts_linux.cpp"])

if "udev" in env and env["udev"]:
    common_linuxbsd.append("libudev-so_wrap.c")

prog = env.add_program("#bin/godot", ["godot_linuxbsd.cpp"] + common_linuxbsd)

if env["debug_symbols"] and env["separate_debug_symbols"]:
    env.AddPostAction(prog, run_in_subprocess(platform_linuxbsd_builders.make_debug_linuxbsd))
