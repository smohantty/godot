#!/usr/bin/env python

Import("env")

from platform_methods import run_in_subprocess
import platform_wayland_builders

WAYLAND_BUILDERS = {
    "WAYLAND_API_HEADER": Builder(
        action=Action(
            "wayland-scanner -c client-header ${SOURCE} ${TARGET}", 'Building Wayland client header: "${TARGET}"'
        ),
        single_source=True,
    ),
    "WAYLAND_API_CODE": Builder(
        action=Action(
            "wayland-scanner -c private-code ${SOURCE} ${TARGET}",
            'Building Wayland protocol marshalling code: "${TARGET}"',
        ),
        single_source=True,
    ),
}
env.Append(BUILDERS=WAYLAND_BUILDERS)

env.WAYLAND_API_HEADER(
    target="xdg_shell.gen.h", source="#thirdparty/wayland-protocols/stable/xdg-shell/xdg-shell.xml"
)

env.WAYLAND_API_CODE(
    target="xdg_shell.gen.c", source="#thirdparty/wayland-protocols/stable/xdg-shell/xdg-shell.xml"
)

import sys
dl_path = './dl'
sys.path.append(dl_path)
import procdl
sys.path.remove(dl_path)

env.Append(BUILDERS={'DLH': env.Builder(action=procdl.build_h_action, suffix='.gen.h', src_suffix='.dl')})
env.Append(BUILDERS={'DLCPP': env.Builder(action=procdl.build_cc_action, suffix='.gen.cc', src_suffix='.dl')})

for dl in Glob('dl/*.dl'):
	env.DLH(str(dl))
	env.DLCPP(str(dl))
for libname in ['gles2', 'gles3']:
	env.Depends('platform_config.h', 'dl/' + libname + '.gen.h')

common_wayland = [
    "crash_handler_wayland.cpp",
    "os_wayland.cpp",
    "power_wayland.cpp",
    "window/window_wayland.cpp",
    "window/native_window_wayland.cpp",
    "window/render_surface_egl.cpp",
    "xdg_shell.gen.c",
    "dl/gles2.gen.cc", 
    "dl/gles3.gen.cc",
]


prog = env.add_program("#bin/godot", ["godot_wayland.cpp"] + common_wayland)

if env["debug_symbols"] and env["separate_debug_symbols"]:
    env.AddPostAction(prog, run_in_subprocess(platform_wayland_builders.make_debug_wayland))